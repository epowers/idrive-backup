#!/usr/bin/env python

import argparse
import datetime
import logging
import os
import sys

import idrive


def main():
    from idrive.db_sqlite import (
        db_init,
        db_insert_folder,
        __db_cursor,
        __db_fetch_next_folder,
        __db_has_folder,
        __db_insert_folder,
        __db_insert_file,
        __db_update_folder_status,
        FileStatus,
        log,
    )
    from idrive.evsweb import (
        idrive_login,
        __idrive_browseFolder,
    )

    parser = argparse.ArgumentParser()
    parser.add_argument('uid', type=str, help='IDrive login user ID.')
    parser.add_argument('pwd', type=str, help='IDrive login password.')
    parser.add_argument('device_id', type=str, help='IDrive device ID.')
    parser.add_argument('-db', '--db-name', type=str, help='SQLite database name.')
    parser.add_argument('-v', '--verbose', action='store_true', help='Enable verbosity.')
    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

    # setup
    host = 'evs.idrive.com'
    device_id = args.device_id
    db_init(args.db_name)
    idrive_login(args.uid, args.pwd)
    root_folder = '/'
    if not __db_has_folder(root_folder, host=host, device_id=device_id):
        db_insert_folder(root_folder, host=host, device_id=device_id)

    # add filesystem folders and files to database
    while True:
        # get a starting folder for search:
        # query db for a folder with no filename and defaul status limit 1
        root_folder = __db_fetch_next_folder(host=host, device_id=device_id)
        if not root_folder:
            break

        cursor = __db_cursor()

        # list the folder
        try:
            files = __idrive_browseFolder(device_id, root_folder)
        except:
            __db_update_folder_status(cursor, root_folder, FileStatus.ERROR, host=host, device_id=device_id)
            cursor.connection.commit()
            continue

        # add all files and subfolders to database
        for file_info in files:
            filename, is_dir = file_info['name'], file_info['is_dir']
            if is_dir:
                folder = os.path.join(root_folder, filename) + '/'
                __db_insert_folder(cursor, folder, host=host, device_id=device_id)
            else:
                size, lmd = int(file_info['size']), file_info['lmd']
                mtime = int(round(datetime.datetime.strptime(lmd, '%Y/%m/%d %H:%M:%S').replace(tzinfo=datetime.timezone.utc).timestamp()))
                __db_insert_file(cursor, root_folder, filename, host=host, device_id=device_id, size=size, mtime=mtime)

        # update the size of the folder in the database with the number of files/folders
        __db_update_folder_status(cursor, root_folder, FileStatus.SCANNED, host=host, device_id=device_id)

        # commit
        cursor.connection.commit()

    log.info("Done ingesting!")


if __name__ == '__main__':
    os.nice(19)
    main()
